import pandas as pd
from openpyxl import load_workbook
from openpyxl.chart import LineChart, Reference
import matplotlib.pyplot as plt

# --- Chemins des fichiers ---
file_path_excel = r"C:\Users\mbencharif\OneDrive - Soteck inc\Bureau\test - courbe hydro v√©toqionol test\R√©sultat de la pr√©-√©tude.xlsx"
file_path_csv = r"C:\Users\mbencharif\OneDrive - Soteck inc\Bureau\test - courbe hydro v√©toqionol test\Dataviz MyPortal3E - VETOQUINOL PRINCEVILLE - test -.csv"
output_path = r"C:\Users\mbencharif\OneDrive - Soteck inc\Bureau\test - courbe hydro v√©toqionol test\df_indicateurs_complet_ligne.xlsx"

# --- Chargement des donn√©es ---
df_excel = pd.read_excel(file_path_excel, sheet_name="Donn√©es Nettoy√©es")
df_csv = pd.read_csv(file_path_csv, sep=';', encoding='latin1', decimal=',')

# --- Conversion datetime ---
df_excel['Date et heure'] = pd.to_datetime(df_excel['Date et heure'])
df_csv['Minute'] = pd.to_datetime(df_csv['Minute'])
df_csv.rename(columns={'Minute': 'Date et heure'}, inplace=True)

# --- Fusion des deux sources ---
df = pd.merge(df_excel, 
              df_csv[['Date et heure', 'Usine : T¬∞C ext√©rieure moyenne mensuelle (Saisie)']], 
              on='Date et heure', how='left')

# --- Calculs ligne par ligne ---
puissance_max = df['Puissance r√©elle (kW)'].max()
df['Facteur_utilisation'] = df['Puissance r√©elle (kW)'] / puissance_max
df['Espace_dispo_sous_500kW'] = (500 - df['Puissance r√©elle (kW)']).clip(lower=0)
df['Jour'] = df['Date et heure'].dt.date

# --- R√©sum√© journalier ---
daily = df.groupby('Jour').agg({
    'Puissance r√©elle (kW)': ['max', 'mean', 'sum'],
    'Usine : T¬∞C ext√©rieure moyenne mensuelle (Saisie)': 'mean',
    'Facteur_utilisation': 'mean',
    'Espace_dispo_sous_500kW': 'mean'
})

# Simplification des noms des colonnes (aplatir MultiIndex)
daily.columns = ['P_max', 'P_moyenne', 'Energie_kWh', 'Temp_moy', 'Fact_util_moy', 'Espace_moy']
daily = daily.reset_index()

# --- Sauvegarde initiale ---
with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
    df.to_excel(writer, sheet_name='Mesures d√©taill√©es', index=False)
    daily.to_excel(writer, sheet_name='R√©sum√© journalier', index=False)

# --- Ajout de graphiques dans Excel ---
wb = load_workbook(output_path)
ws = wb['Mesures d√©taill√©es']

min_row = 2
max_row = ws.max_row
cats = Reference(ws, min_col=1, min_row=min_row, max_row=max_row)  # Date et heure

def create_line_chart(title, y_axis_title, col, position):
    chart = LineChart()
    chart.title = title
    chart.y_axis.title = y_axis_title
    chart.x_axis.title = "Date et heure"
    chart.style = 12
    
    # On prend les donn√©es sans la ligne d'en-t√™te (start at row 2)
    values = Reference(ws, min_col=col, min_row=2, max_row=max_row)
    chart.add_data(values, titles_from_data=False)  # Pas de titre dans les donn√©es
    
    # Les cat√©gories sur la colonne Date et heure (col 1), lignes 2 √† max_row
    chart.set_categories(Reference(ws, min_col=1, min_row=2, max_row=max_row))
    
    ws.add_chart(chart, position)

# Exemples d'indices, adapter selon le fichier final
col_dict = {
    "Puissance r√©elle (kW)": 2,  # Colonne B
    "Usine : T¬∞C ext√©rieure moyenne mensuelle (Saisie)": 3,  # Colonne C (v√©rifie !)
    "Facteur_utilisation": 4,  # Colonne D
    "Espace_dispo_sous_500kW": 5,  # Colonne E
}

positions = ["N2", "N20", "N38", "N56"]

for (title, col), pos in zip(col_dict.items(), positions):
    create_line_chart(title, title, col, pos)

wb.save(output_path)

print(f"‚úÖ Script termin√© avec succ√®s !\nFichier Excel cr√©√© avec donn√©es ligne par ligne, indicateurs et 4 graphiques :\n{output_path}")

# --- Calculs suppl√©mentaires pour matplotlib ---

# Conversion facteur d'utilisation en %
df['Facteur_utilisation_%'] = df['Facteur_utilisation'] * 100

# √ânergie pour chaque ligne (intervalle 15 min = 0.25 h)
df['Energie_kWh'] = df['Puissance r√©elle (kW)'] * 0.25

# Extraction mois sous forme p√©riodique pour grouper
df['Mois'] = df['Date et heure'].dt.to_period('M')

# Regroupement par mois pour volume mensuel
energie_mensuelle = df.groupby('Mois')['Energie_kWh'].sum().reset_index()
energie_mensuelle.columns = ['Mois', 'Energie_totale_kWh']

# Conversion de 'Mois' en datetime pour matplotlib
energie_mensuelle['Mois_dt'] = energie_mensuelle['Mois'].dt.to_timestamp()

print("üìÖ Volume mensuel sur 24 mois :")
print(energie_mensuelle[['Mois', 'Energie_totale_kWh']])

# --- Affichage graphique ---

plt.figure(figsize=(14, 12))

# 1Ô∏è‚É£ Puissance r√©elle
plt.subplot(4, 1, 1)
plt.plot(df['Date et heure'], df['Puissance r√©elle (kW)'], color='blue')
plt.title('Puissance r√©elle (kW)')
plt.xlabel('Date et heure')
plt.ylabel('kW')
plt.grid(True)

# 2Ô∏è‚É£ Facteur d'utilisation en %
plt.subplot(4, 1, 2)
plt.plot(df['Date et heure'], df['Facteur_utilisation_%'], color='green')
plt.title('Facteur d\'utilisation (%)')
plt.xlabel('Date et heure')
plt.ylabel('%')
plt.grid(True)

# 3Ô∏è‚É£ Espace disponible sous 500 kW
plt.subplot(4, 1, 3)
plt.plot(df['Date et heure'], df['Espace_dispo_sous_500kW'], color='orange')
plt.title('Espace disponible sous 500 kW')
plt.xlabel('Date et heure')
plt.ylabel('kW disponibles')
plt.grid(True)

# 4Ô∏è‚É£ √ânergie totale mensuelle
plt.subplot(4, 1, 4)
plt.bar(energie_mensuelle['Mois_dt'], energie_mensuelle['Energie_totale_kWh'], color='steelblue', width=20)
plt.title("√ânergie totale consomm√©e par mois (kWh) sur 24 mois")
plt.xlabel("Mois")
plt.ylabel("√ânergie (kWh)")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()
