import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Audit Flash Interactif", layout="centered")
st.title("\U0001F4A1 Audit Flash √ânerg√©tique")
st.markdown("""
Bienvenue dans l'outil interactif d'audit flash √©nerg√©tique. Ce formulaire vous permettra de prioriser vos crit√®res √† l'aide de la m√©thode **TOPSIS**, afin de recevoir un r√©sum√© personnalis√©.
""")
st.markdown("""
---
üîó Pour en savoir plus sur notre entreprise et nos services, visitez notre site :  
**[Soteck](https://www.soteck.com/fr)**
""")


# √âtape 1 : Infos g√©n√©rales
st.header("1. Informations g√©n√©rales")
nom = st.text_input("Nom complet")
entreprise = st.text_input("Nom de l'entreprise")
secteur = st.selectbox("Secteur d'activit√©", ["Industrie", "Tertiaire", "Agroalimentaire", "Autre"])
objectif = st.multiselect("Quels sont vos objectifs prioritaires ?", ["R√©duction de consommation", "R√©duction des co√ªts", "R√©duction des GES", "Am√©lioration du confort", "R√©duction de maintenance"])

# √âtape 2 : Comparaison AHP
st.header("2. Priorisation des crit√®res (AHP simplifi√©)")
st.markdown("Comparez les crit√®res deux √† deux selon leur importance pour vous.")
criteria = ["√ânergie", "Co√ªts", "Environnement", "Confort", "Maintenance"]

pairwise = {}

for i in range(len(criteria)):
    for j in range(i + 1, len(criteria)):
        question = f"Par rapport √† **{criteria[i]}** vs **{criteria[j]}**, lequel est plus important ?"
        choix = st.slider(question, 1, 9, 5, format="%d")
        pairwise[(criteria[i], criteria[j])] = choix

# Cr√©ation de la matrice AHP
if st.button("Calculer les priorit√©s"):
    size = len(criteria)
    mat = np.ones((size, size))

    for i in range(size):
        for j in range(size):
            if i != j:
                if (criteria[i], criteria[j]) in pairwise:
                    mat[i][j] = pairwise[(criteria[i], criteria[j])]
                    mat[j][i] = 1 / mat[i][j]

    # Normalisation et pond√©ration
    column_sums = np.sum(mat, axis=0)
    normalized = mat / column_sums
    weights = np.mean(normalized, axis=1)
    df_weights = pd.DataFrame({"Crit√®re": criteria, "Poids": weights})

    st.success("Voici la pond√©ration de vos crit√®res :")
    st.dataframe(df_weights)

    fig = px.pie(df_weights, names="Crit√®re", values="Poids", title="Priorisation des crit√®res")
    st.plotly_chart(fig)

    st.markdown("Un rapport peut √™tre g√©n√©r√© selon ces priorit√©s pour vous proposer des actions cibl√©es d√®s le premier contact.")

    # Analyse et g√©n√©ration de r√©sum√©
    st.subheader("R√©sum√© personnalis√© des priorit√©s")

    top_criteria = df_weights.sort_values("Poids", ascending=False).head(3)

    resume = f"""
Bonjour {nom if nom else "utilisateur"}, voici un aper√ßu de vos priorit√©s :

1. **{top_criteria.iloc[0]['Crit√®re']}** : Ce crit√®re a √©t√© identifi√© comme le plus important. Nous vous proposerons des actions cibl√©es pour l'optimiser en priorit√©.
2. **{top_criteria.iloc[1]['Crit√®re']}** : Ce crit√®re arrive en deuxi√®me position, et sera int√©gr√© dans les recommandations secondaires.
3. **{top_criteria.iloc[2]['Crit√®re']}** : Ce crit√®re compl√®te votre trio de t√™te et pourra √™tre int√©gr√© dans les solutions compl√©mentaires.

Gr√¢ce √† cette hi√©rarchisation, un audit cibl√© pourra √™tre planifi√© avec un maximum d'efficacit√© et de pertinence.
"""

    st.markdown(resume)

    # Bouton pour t√©l√©charger le r√©sum√©
    st.download_button(
        label="üìÑ T√©l√©charger le r√©sum√© personnalis√©",
        data=resume,
        file_name=f"resume_audit_flash_{nom.replace(' ', '_') if nom else 'utilisateur'}.txt",
        mime="text/plain"
    )
